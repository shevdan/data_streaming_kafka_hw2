x-postgres-env: &postgres-env
  POSTGRES_DB: frames_db
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password


services:

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda
    ports:
      # exposes kafka api to host
      - "9092:9092"
      # exposes kafka api for internal network communication
      - "29092:29092"
      # exposes kafka admin port for monitoring
      - "9644:9644"
    volumes:
      - redpanda_data:/var/lib/redpanda/data # persists redpanda data
    command:
      - redpanda
      - start
      - --node-id
      - "0"
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092 # listens on all interfaces inside container
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:29092,PLAINTEXT_HOST://localhost:9092 # advertises for internal and external clients
    healthcheck:
      test: ["CMD", "rpk", "cluster", "info"]
      interval: 10s
      timeout: 10s
      retries: 30
    
  topic_init:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: topic_init
    depends_on:
      redpanda:
        condition: service_healthy
    command: 
      - topic
      - create
      - frames
      - --partitions=1
      - --brokers=redpanda:29092
  
  topic_cleanup:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: topic_cleanup
    depends_on:
      redpanda:
        condition: service_healthy
    command: 
      - topic
      - delete
      - frames
      - --brokers=redpanda:29092
    profiles: ["manual"]

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      <<: *postgres-env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./microservices/data_generator/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d frames_db"]
      interval: 5s
      timeout: 5s
      retries: 30


  # --- Microservices --- #
  data_generator_1:
    build: ./microservices/data_generator
    volumes:
      - ./microservices/data_generator:/app
      - ./data:/app/data
      - frame_store:/app/frame_store 
    command: python /app/app.py
    ports:
      - "5001:5000"
    environment:
      SERVICE_NAME: Data Generator 0
      KAFKA_BROKER: redpanda:29092
      DATASET_ROOT_DIR: /app/data
      VID_SUBDIR: vids
      VIDEO_FILE: vid_01.mp4
      DATA_TOPIC: frames
      PRODUCER_INSTANCE_ID: "0"
      TOTAL_PRODUCERS: "2"
      POSTGRES_DB: frames_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      MAX_FRAMES_TO_PROCESS: 1000
    depends_on:
      redpanda:
        condition: service_healthy
      topic_init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  data_generator_2:
    build: ./microservices/data_generator
    volumes:
      - ./microservices/data_generator:/app
      - ./data:/app/data
      - frame_store:/app/frame_store 
    command: python /app/app.py
    ports:
      - "5002:5000"
    environment:
      SERVICE_NAME: Data Generator 1
      KAFKA_BROKER: redpanda:29092
      DATASET_ROOT_DIR: /app/data
      VID_SUBDIR: vids
      VIDEO_FILE: vid_01.mp4
      DATA_TOPIC: frames
      PRODUCER_INSTANCE_ID: "1"
      TOTAL_PRODUCERS: "2"
      POSTGRES_DB: frames_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      MAX_FRAMES_TO_PROCESS: 1000
    depends_on:
      redpanda:
        condition: service_healthy
      topic_init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy

  frame_processor:
    build: ./microservices/frame_processor
    volumes:
      - ./microservices/frame_processor:/app
      - ./debug_output:/app/debug_output
    command: python /app/app.py
    environment:
      SERVICE_NAME: Frame Processor
      KAFKA_BROKER: redpanda:29092
      INPUT_TOPIC: frames
      PROCESS_LOG_TOPIC: processing-logs
      CSV_PATH: /app/debug_output/processing_logs.csv
    depends_on:
      redpanda:
        condition: service_healthy
      topic_init:
        condition: service_completed_successfully

  stats_generator:
    build: ./microservices/stats_generator
    volumes:
      - ./microservices/stats_generator:/app
      - ./debug_output:/app/debug_output
    command: python /app/app.py
    ports:
      - "5007:5000"
    environment:
      SERVICE_NAME: Stats Generator
      KAFKA_BROKER: redpanda:29092
      PROCESS_LOG_TOPIC: processing-logs
      CSV_PATH: /app/debug_output/stats.csv
      MAX_FRAMES_TO_PROCESS: 1000
    depends_on:
      redpanda:
        condition: service_healthy
      topic_init:
        condition: service_completed_successfully


# --- Volumes --- #
volumes:
  redpanda_data: 
  pg_data:
  frame_store: